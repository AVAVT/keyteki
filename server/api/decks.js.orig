const monk = require('monk');
const passport = require('passport');

const ConfigService = require('../services/configService');
const DeckService = require('../services/DeckService.js');
const { wrapAsync } = require('../util.js');

const configService = new ConfigService();

<<<<<<< HEAD
module.exports.init = function (server) {
    server.get('/api/decks/:id', wrapAsync(async function (req, res) {
        if(!req.user) {
            return res.status(401).send({ message: 'Unauthorized' });
        }
=======
let db = monk(configService.getValue('dbPath'));
let deckService = new DeckService(db);
>>>>>>> migrate the deck editor

module.exports.init = function (server) {
    server.get('/api/decks/:id', passport.authenticate('jwt', { session: false }), wrapAsync(async function (req, res) {
        if(!req.params.id || req.params.id === '') {
            return res.status(404).send({ message: 'No such deck' });
        }

        let deck = await deckService.getById(req.params.id);

        if(!deck) {
            return res.status(404).send({ message: 'No such deck' });
        }

        if(deck.username !== req.user.username) {
            return res.status(401).send({ message: 'Unauthorized' });
        }

        res.send({ success: true, deck: deck });
    }));

<<<<<<< HEAD
    server.get('/api/decks', wrapAsync(async function (req, res) {
        if(!req.user) {
            return res.status(401).send({ message: 'Unauthorized' });
        }

=======
    server.get('/api/decks', passport.authenticate('jwt', { session: false }), wrapAsync(async function (req, res) {
>>>>>>> migrate the deck editor
        let decks = await deckService.findByUserName(req.user.username);
        res.send({ success: true, decks: decks });
    }));

<<<<<<< HEAD
    server.put('/api/decks/:id', wrapAsync(async function (req, res) {
        if(!req.user) {
            return res.status(401).send({ message: 'Unauthorized' });
        }

=======
    server.put('/api/decks/:id', passport.authenticate('jwt', { session: false }), wrapAsync(async function (req, res) {
>>>>>>> migrate the deck editor
        let deck = await deckService.getById(req.params.id);

        if(!deck) {
            return res.status(404).send({ message: 'No such deck' });
        }

        if(deck.username !== req.user.username) {
            return res.status(401).send({ message: 'Unauthorized' });
        }

        let data = Object.assign({ id: req.params.id }, req.body.deck);

        deckService.update(data);

        res.send({ success: true, message: 'Saved' });
    }));

<<<<<<< HEAD
    server.post('/api/decks', wrapAsync(async function (req, res) {
        if(!req.user) {
            return res.status(401).send({ message: 'Unauthorized' });
=======
    server.post('/api/decks', passport.authenticate('jwt', { session: false }), wrapAsync(async function (req, res) {
        if(!req.body.uuid) {
            return res.send({ success: false, message: 'uuid must be specified' });
>>>>>>> migrate the deck editor
        }

        let deck = Object.assign({}, { uuid: req.body.uuid, username: req.user.username });
        let savedDeck;

        try {
            savedDeck = await deckService.create(deck);
        } catch(error) {
            res.send({ success: false, message: 'An error occurred importing your deck.  Please check the Url or try again later.' });
        }

        if(!savedDeck) {
            res.send({ success: false, message: 'An error occurred importing your deck.  Please check the Url or try again later.' });
        }

        res.send({ success: true, deck: savedDeck });
    }));

    server.delete('/api/decks/:id', passport.authenticate('jwt', { session: false }), wrapAsync(async function (req, res) {
        let id = req.params.id;

        let deck = await deckService.getById(id);

        if(!deck) {
            return res.status(404).send({ success: false, message: 'No such deck' });
        }

        if(deck.username !== req.user.username) {
            return res.status(401).send({ message: 'Unauthorized' });
        }

        await deckService.delete(id);
        res.send({ success: true, message: 'Deck deleted successfully', deckId: id });
    }));
};
